pipeline {
    agent any
    
    environment {
        GCP_PROJECT = credentials('striking-water-472711-g2')
        GKE_CLUSTER = 'shopedgedge-cluster'
        GKE_ZONE = 'us-central1' 
        IMAGE_NAME = 'us-central1-docker.pkg.dev/shopedge-project/shopedgeedge/shopedge-app'
    }
    // just comment
    parameters {
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Docker image tag')
    }
    
    stages {
        stage('Setup GKE Auth') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gcp-service-account', variable: 'GC_KEY')]) {
                        sh '''
                            gcloud auth activate-service-account --key-file=$GC_KEY
                            gcloud config set project $GCP_PROJECT
                            gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE
                        '''
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                sh '''
                    # Update image tag in deployment
                    sed -i "s|IMAGE_PLACEHOLDER|$IMAGE_NAME:$IMAGE_TAG|g" k8s/app-deployment.yaml
                    
                    # Apply Kubernetes manifests
                    kubectl apply -f k8s/app-deployment.yaml
                    kubectl apply -f k8s/monitoring.yaml
                    
                    # Wait for deployment to complete
                    kubectl rollout status deployment/shopedge-app --timeout=300s
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                sh '''
                    # Simple smoke test
                    echo "Performing smoke tests..."
                    sleep 30
                    
                    # Test if application is responding
                    APP_URL=$(kubectl get service shopedge-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
                    if curl -f http://$APP_URL; then
                        echo "Smoke test passed!"
                    else
                        echo "Smoke test failed!"
                        exit 1
                    fi
                '''
            }
        }
        
        stage('Promote to Production') {
            when {
                branch 'main'
            }
            steps {
                echo "Deployment to production completed successfully"
                // Add production-specific steps here
            }
        }
    }
    
    post {
        always {
            echo "Pipeline execution completed"
            // Cleanup or notifications
        }
        success {
            echo "Deployment successful!"
            // Send success notificationh
        }
        failure {
            echo "Deployment failed!"
            // Send failure notificationi
        }
    }
}